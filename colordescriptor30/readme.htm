
<html>
<head><title>ColorDescriptor software by Koen van de Sande and University of Amsterdam</title>
<style type="text/css">
<!--
   pre {font-family: monospace; margin-right: 5px; background: #eee;}
-->
</style>
</head><body>
<h1>ColorDescriptor software v3.0</h1>
Created by <a href="http://www.science.uva.nl/%7Eksande">Koen van de Sande</a>, (c) University of Amsterdam<br/>For additional information, contact Koen van de Sande (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">ksande at uva.nl</span>)<br/><br/><h2>Introduction</h2>
This document contains the usage information of the color descriptor binary software. For a more high-level overview, you should start reading on the <a href="http://staff.science.uva.nl/%7Eksande/research/colordescriptors/">main color descriptor website</a>.<br/><br/><h2>Usage</h2>
Use the binary to compute color descriptors within an image, such as color histograms and color SIFT. The input image can be in PNG or JPG formats. The detector and descriptor options are documented below:<br/><br/><div class="code"><pre>        colorDescriptor &lt;image&gt; --detector &lt;detector&gt; --descriptor &lt;descriptor&gt; --output &lt;descriptorfile.txt&gt;</pre></div>Note: the new <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--batch</span>mode interprets arguments differently; see the documentation below.<br/><br/><h2>License</h2>
<br/><div class="code"><pre>
Copyright (c) Koen van de Sande / University of Amsterdam

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any direct, 
indirect, consequential, special, incidental, or other damages, including 
but not limited to damages for lost profits, interruption of business, 
lost or corrupted data or programs, system crashes, or diversion of system 
or other resources, arising out of or relating to this license or the 
performance, quality, results, use of, or inability to use this software.

The authors shall not be liable for any claim asserted against you by any 
other party, including but not limited to claims for infringement of copyright
or other intellectual property rights. Any commercial use of this software 
requires a license from the University of Amsterdam.

Note that the SIFT method is patented by the University of British Columbia. 
Therefore, while this software contains its own implementation of SIFT, 
for commercial use a license can be obtained to:

"Method and apparatus for identifying scale invariant
features in an image and use of same for locating an object in an
image," David G. Lowe, US Patent 6,711,293 (March 23,
2004). Provisional application filed March 8, 1999. Asignee: The
University of British Columbia.

For further details on obtaining a commercial SIFT license, contact David
Lowe (lowe at cs.ubc.ca) or the University-Industry Liaison Office of the
University of British Columbia. 

This license must be retained with all copies of the software.</pre></div><br/><h2>Citation</h2>
If you use this software, then please cite the following paper:<br/><ul><li>Koen E. A. van de Sande, Theo Gevers and Cees G. M. Snoek, Evaluating Color Descriptors for Object and Scene Recognition. <em>IEEE Transactions on Pattern Analysis and Machine Intelligence</em> volume 32 (9), pages 1582-1596, 2010. <a href="http://www.science.uva.nl/research/publications/2010/vandeSandeTPAMI2010">PDF version</a></li></ul><strong>BibTeX:</strong><div class="code"><pre>
@Article{vandeSandeTPAMI2010,
  author       = "van de Sande, K. E. A. and Gevers, T. and Snoek, C. G. M.",
  title        = "Evaluating Color Descriptors for Object and Scene Recognition",
  journal      = "IEEE Transactions on Pattern Analysis and Machine Intelligence",
  volume       = "32",
  number       = "9",
  pages        = "1582--1596",
  year         = "2010",
  url          = "[url]http://www.science.uva.nl/research/publications/2010/vandeSandeTPAMI2010[/url]"
}</pre></div><br/><h2>Detectors</h2>
The detector option can be one of the following:<br/><ul><li> <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--detector harrislaplace</span></li><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--detector densesampling</span></li></ul><br/><h3>Harris-Laplace salient point detector</h3>
The Harris-Laplace salient point detector uses a Harris corner detector and subsequently the Laplacian for scale selection. See the paper corresponding to this software for references.<br/><br/>Additional options for the Harris-Laplace salient point detector:<br/><div class="code"><pre>
        --harrisThreshold threshold [default: 1e-9]
        --harrisK k [default: 0.06]
        --laplaceThreshold threshold [default: 0.03]</pre></div><br/><h3>Dense sampling detector</h3>
The dense sampling samples at every 6th pixel in the image. For better coverage, a honeyrate structure is used: every odd row is offset by half of the sampling spacing (e.g. by 3 pixels by default). This reduces the overlap between points. By default, the dense sampling will automatically infer a single scale from the spacing parameter. However, you can also specify multiple scales to sample at, for example:<br/><div class="code"><pre>        --detector densesampling --ds_spacing 10 --ds_scales 1.6+3.2</pre></div>Additional options for the dense sampling detector:<br/><div class="code"><pre>
        --ds_spacing pixels [default: 6]
        --ds_scales scale1+scale2+...</pre></div>The default sampling scale for a spacing of 6 pixels is 1.2.<br/><br/><h2>Descriptors</h2>
The following descriptors are available (the name to pass to <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--descriptor</span>is shown in parentheses):<br/><ul><li> RGB histogram (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">rgbhistogram</span>)<br/></li><li> Opponent histogram (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">opponenthistogram</span>)<br/></li><li> Hue histogram (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">huehistogram</span>)<br/></li><li> <em>rg</em> histogram (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">nrghistogram</span>)<br/></li><li> Transformed Color histogram (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">transformedcolorhistogram</span>)<br/></li><li> Color moments (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">colormoments</span>)<br/></li><li> Color moment invariants (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">colormomentinvariants</span>)<br/></li><li> SIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">sift</span>)<br/></li><li> HueSIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">huesift</span>)<br/></li><li> HSV-SIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">hsvsift</span>)<br/></li><li> OpponentSIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">opponentsift</span>)<br/></li><li> <em>rg</em>SIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">rgsift</span>)<br/></li><li> C-SIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">csift</span>)<br/></li><li> RGB-SIFT(<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">rgbsift</span>), equal to transformed color SIFT (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">transformedcolorsift</span>). See the journal paper for equivalence.<br/></li></ul><br/><h2>File format (text)</h2>
Files written using <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--output &lt;filename&gt;</span>look as follows:<br/><div class="code"><pre>KOEN1
10
4
&lt;CIRCLE 91 186 16.9706 0 0&gt;; 28 45 4 0 0 0 9 14 10 119;
&lt;CIRCLE 156 179 16.9706 0 0&gt;; 7 82 80 62 23 2 15 6 21 23;
&lt;CIRCLE 242 108 12 0 0&gt;; 50 67 10 0 0 0 69 44 31 23 0 1;
&lt;CIRCLE 277 105 14.2705 0 0&gt;; 21 12 0 0 7 18 127 50 2 0 0;</pre></div>The first line is used as a marker for the file format. The second line specifies the dimensionality of the point descriptor. The third line describes the number of points present in the file. Following this header, there is one line per point.<br/>The per-point lines all consist of two parts: a description of the point (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">&lt;CIRCLE x y scale orientation cornerness&gt;</span>) and a list of numbers, the descriptor vector. These two parts can be seperated through the semicolon ;. The <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">x</span>and <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">y</span>coordinates start counting at 1, like Matlab.<br/><br/>By default, the program uses a Harris-Laplace scale-invariant point detector to obtain the scale-invariant points in an image (these are refered to as CIRCLE in the file format of the descriptors).<br/><br/><h2>File format (binary)</h2>
Files written using <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--outputFormat binary --output &lt;filename&gt;</span>are written to disk as a binary file in the "BINDESC1" format. The main advantage of using binary files is that they are much more efficient to parse in other software. The <a href="http://staff.science.uva.nl/%7Eksande/research/colordescriptors/DescriptorIO.py">DescriptorIO.py</a> file included in the distribution contains functions to parse the different file formats in Python. Besides Python, the script also depends on NumPy. For Matlab, the <a href="http://staff.science.uva.nl/%7Eksande/research/colordescriptors/readBinaryDescriptors.m">readBinaryDescriptors.m</a> file can be used to read the files.<br/><br/><h2>Visual Codebooks</h2>
The visual codebook model is widely used for object and scene categorization. In terms of processing speed, it is often faster to immediately construct a histogram of the descriptor occurence frequencies, instead of storing all descriptors to disk first and then performing this step separately. As of version 2.1, there are three fileformats for a codebook: the first one is the text-format documented above, where every line is a codebook vector. The &lt;CIRCLE&gt; part of the descriptor will not be used for the codebook, but it needs to be present for the file to be valid. The second format is the binary format discussed above, which allows for fast loading of the codebook (as text file formats are rather slow). The third option are old "binary" codebooks created with older versions of the software (this custom file format is no longer needed).<br/><br/><ul><li> Through the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebook filename</span>option, a file with the codebook vectors can be specified. All file formats are supported by this option<br/></li><li> For efficiency, it is recommended to use the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebook</span>option with the binary file format, as it loads much faster (about 0.5s for the text version, versus &lt;0.05s for the binary version).<br/></li></ul><br/>When using the codebook mode of the software, a single output vector will be written to the output file. This vector has length equal to the codebook size. If the spatial pyramid (see below) is used as well, then one vector per pyramid element will be written.<br/><br/><strong>Note</strong>: The Linux version of <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">colorDescriptor</span>has been compiled with <a href="http://math-atlas.sourceforge.net/">ATLAS</a>, which allows for efficient codebook usage. The Windows/Mac versions have not been compiled with these faster routines, and is therefore significantly slower.<br/><br/><h3>Soft Assignment</h3>
One inherent component of the codebook model is the assignment of discrete visual words to continuous image features. There is a clear mismatch of this hard assignment with the nature of continuous features. In the <a href="http://www.science.uva.nl/research/publications/2010/vanGemertTPAMI2010/">Visual Word Ambiguity</a> paper by Van Gemert soft-assignment of visual words to image features is investigated. The <em>Codeword Uncertainty</em> (UNC) is included in the software and can be used by specifying <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode unc</span>. The sigma parameter for uncertainty can be specified using <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookSigma 90</span>.<br/><br/><h3>Alternate codebook output mode</h3>
The default codebook mode (<span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode hard</span>) writes a single output vector to the output file. However, sometimes it is useful to know which point goes where in the feature vector. The alternative codebook mode <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode hardindex</span>outputs all the points and the index of the codebook element to which it would have been assigned.<br/><br/><h2>Spatial Pyramids</h2>
Using the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--pointSelector</span>option, you can use a spatial pyramid like <a href="http://www.cs.unc.edu/%7Elazebnik/publications/cvpr06b.pdf">Lazebnik</a>. Possible calls include:<br/><ul><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--pointSelector pyramid-1x1-2x2</span></li><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--pointSelector pyramid-1x1-2x2-1x3</span></li></ul>These are shorthands for the real specification language for pyramids: they would look like <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">P1x1#0+P2x2#0+P2x2#1+P2x2#2+P2x2#3</span>and <br/><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">P1x1#0+P2x2#0+P2x2#1+P2x2#2+P2x2#3+P1x3#0+P1x3#1+P1x3#2</span>when written out in full. Using this specification language, you can define your own custom pyramids.<br/><br/><h2>Additional options</h2>
The following options are also available:<br/><ul><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--loadRegions filename</span>Allows loading of custom regions (e.g. your own detector) instead of using a built-in detector. The file should be in BINDESC1 or KOEN1-format, and the descriptors can be left out (making a typical line look like this: <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">&lt;CIRCLE 91 186 16.9706 0 0&gt;;;</span>).<br/></li><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--saveRegions filename</span>Allows saving of just the regions, without any descriptors.<br/></li><li><span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--keepLimited n</span>Write a random subset of at most <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">n</span>descriptors to disk, instead of all descriptors for an image.<br/></li></ul><br/><h2>Frequently Asked Questions</h2>
<h3>Error: Cannot find file</h3>
When the software complains that it cannot find a file, try using a relative path (i.e. a path that does not start with /) instead of an absolute path. Another solution is to only use files which are in the current folder.<br/><br/><h3>What is the interpretation of scale?</h3>
The scale parameter was implemented to correspond with the Gaussian filter sigma at which points were detected. Therefore, the scale is not directly interpretable as the size of the region described in terms of number of pixels. However, it is linearly related the radius of the circular area described. To capture the area of the Gaussian originally used, we have a 3x magnification factor. But, remember that SIFT has 4x4 cells, and this is a measure for a single cell. So, because we are working with a radius, multiply by 2. Due to the square shape of the region, we need to extend the outer radius even further by <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">sqrt(2)</span>, otherwise the corners of the outer cells are cut off by our circle. So, the largest outer radius is <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">Round(scale * 3 * 2 * sqrt(2))</span>. The area from which the SIFT descriptor is computed is a square which fits within a circle of this radius. Also, due to the Gaussian weighting applied within SIFT, the area that really matters is much, much smaller: the outer parts get a low weight.<br/><br/>For the default scale of 1.2, we get a outer circle radius of 10. The potential sampling area then becomes <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">-10..10</span>, e.g. a <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">21x21</span>patch. However, the square area which fits inside this circle is smaller: about <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">15x15</span>. The corners of this <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">15x15</span>square touch the outer circle.<br/><br/><h3>Are the descriptors normalized?</h3>
The SIFT-based descriptors are L2-normalized, and subsequently multiplied by 512 and rounded to an integer. To verify this, divide all elements of the descriptor by 512, and compute the L2 norm, which will be approximately 1. For color extensions of SIFT, each channel is normalized independently, hence the L2 norm of the whole descriptor will be 3. The histogram-based descriptors are L1-normalized.<br/><br/><h3>Floating Point Exception</h3>
When launching the executable, it immediately exits with a floating point exception. One possible cause is a lack of certain SSE instructions in your CPU. However, that should only happen on some CPUs from 2005 or earlier. Also, this depends on how the executable is compiled. Currently (v2.1), the Linux 64-bit executable is provided in two versions: one that only requires SSE and SSE2, the other version also uses more recent SSE versions.<br/><br/><h3>Error: version GLIBCXX_3.4.9 not found</h3>
The 32-bit Linux version is compiled on Debian 5. Your Linux distribution is too ancient for the binaries to work (the C++ runtimes are too old). The 64-bit Linux SSE2 version is much more forgiving.<br/><br/><h3>Problems with high-resolution images</h3>
When you feed high-resolution images (e.g. photos directly from a digital camera with 3000x2000 pixels or similar) into the software, it can be very slow and/or run out of memory if you sample very dense. We resize our images to a resolution of at most (500,x) or (x,500) with x &lt; 500 before processing them.<br/><br/><h3>Why are the Windows/Mac versions so slow?</h3>
Applying the codebook uses the optimized ATLAS linear algebra routines on Linux. However, on Windows, we are unable to compile ATLAS using the Microsoft Visual C++ compiler. An alternative would be to use the Intel Math Kernel Library, and we would be happy to accept donations for its license cost.<br/><br/><h3>Why is the direction (angle) field always 0?</h3>
Estimating the dominant orientation of a descriptor is useful in matching scenarios. However, in an object/scene categorization setting, the additional invariance reduces accuracy. Being able to discriminate between dominant directions of <em>up</em> and <em>right</em> is very useful here, and rotated down images are quite rare in an object categorization setting. Therefore, orientation estimation is disabled in the color descriptor software. The subsequent rotation of the descriptor to achieve rotation-invariance is still possible by supplying your own regions and angles for an image (through <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--loadRegions</span>). However, by default, no such rotation is performed, since the default angle is 0.<br/><br/><h3>Why do I get Not-a-Number in combination with soft codebook assignment</h3>
Be sure to specify the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookSigma</span>option (e.g. set to 90), because the default value is 0 (which leads to a division by 0 and therefore to NaN).<br/><br/><h2>Changelog</h2>
<h3>3.0 (2011-02-18)</h3>
Added batch mode to process multiple images in a row<br/>Experimental GPU version (separate download, based on our <a href="http://www.science.uva.nl/research/publications/2011/vandeSandeITM2011/">GPU paper</a>)<br/>Windows version now uses multiple threads<br/>Fixed <a href="http://staff.science.uva.nl/%7Eksande/research/colordescriptors/exampleCreateCodebook.py">example script</a> for codebook construction when there are images with 0 descriptors<br/><h3>2.1 (2010-06-10)</h3>
<ul><li>Greatly improved efficiency of I/O operations (reading/writing files)<br/></li><li>Improved efficiency of internal datastructures, reducing overhead on many operations (10-20%), improved speed of vector quantization (10-20%). Example time reduction: from 3.52s to 2.33s.<br/></li><li>The <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebook</span>option now reads files in any format, making the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookConvert</span>option redundant. It is recommended to use the BINDESC1 file format to store codebooks (e.g. the same format which you get from the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--outputFormat binary</span>)<br/></li><li>Fixed minor bug in the Harris-Laplace detector for the two smallest scales<br/></li><li>Provide an <a href="http://staff.science.uva.nl/%7Eksande/research/colordescriptors/exampleCreateCodebook.py">example script</a> on how to build a codebook from a set of images<br/></li><li>For 64-bit Linux version: Provide additional executable with SSE/SSE2 support only, so they also work on older CPUs (v2.0 required SSE3/4 for certain platforms)<br/></li><li>BUGFIX: included readBinaryDescriptors.m example script no longer handles rows and columns incorrectly (e.g. it works now)<br/></li></ul><h3>2.0 (2009-09-24)</h3>
<ul><li>The citation for the software has changed to the <a href="http://www.science.uva.nl/research/publications/2010/vandeSandeTPAMI2010">journal version</a>.<br/></li><li>Added RGB-SIFT descriptor.<br/></li><li>Added new binary file output mode <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--outputFormat binary</span>. The binary file format is very efficient to write, and also very efficient to parse in other software.<br/></li><li>Added soft codebook assignment <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode unc</span>(UNC from the paper by Van Gemert et al). <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookSigma 90</span>controls the smoothing performed within the codebook.<br/></li><li>Changed the default scale for dense sampling to a better choice.<br/></li><li>Scale estimation in Harris-Laplace works better for small scales.<br/></li><li>Note: Storage format of binary codebooks (created using <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookConvert</span>) has changed; old files can still be read.<br/></li></ul><h3>1.3 (2009-02-12)</h3>
<ul><li>New codebook mode <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode hardindex</span>which outputs all the points and the index of the codebook element to which it would have been assigned. The normal <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">--codebookMode hard</span>would only output the final feature vector, the new mode allows you to see which point goes where in the feature vector.<br/></li><li>Linux versions now use ATLAS for codebook projection, which is up to 5x faster.<br/></li></ul><h3>1.2 (2008-12-15)</h3>
<ul><li>Added <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">transformedcolorhistogram</span>to documentation (was already in the executable)<br/></li><li>Made <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">huesift</span>automatically use the parameters from the paper (instead of requiring additional command-line options)<br/></li></ul><h3>1.1 (2008-11-20)</h3>
<ul><li>Using the <span style="font-family: monospace; margin-right: 5px; background: #eee; font-size: 1.2em; ;">csift</span>descriptor no longer crashes (memory was still used after it had been released, which gives a segmentation fault)<br/></li></ul><h3>1.0 (2008-11-07)</h3>
<ul><li>Initial release<br/></li></ul>
</body></html>
