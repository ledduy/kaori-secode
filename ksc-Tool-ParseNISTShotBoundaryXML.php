<?php

/**
 * 		@file 	ksc-AppConfigForProject.php
 * 		@brief 	Parse Shot Boundary XML File.
 *				NIST provided .mp7.tar.gz --> videoNum.mp7.xml contains information for shot boundary
 *				Parse .xml file and save it to .sb file
 *				Then compare with .lig.sb file for double checking consistency
 *				.lig.sb file is generated by parsing .msb file provided by NIST (.msb.tgz)
 *		@author Duy-Dinh Le (ledduy@gmail.com, ledduy@ieee.org).
 *
 * 		Copyright (C) 2010-2013 Duy-Dinh Le.
 * 		All rights reserved.
 * 		Last update	: 04 Jul 2013.
 */


// Look for // *** CHANGED *** if using for new benchmark
// Run this script after ksc-Tool-ParseNISTCollectionXML.php

/// !!! IMPORTANT !!!
/// Using lstx file --> having info such as frameRate, frameCount, duration
/// Using lig.sb --> for validation with sb files provided by LIG
/// Save inconsistency to csv file


/////////////////////////////////////////////////////////////////////////////

require_once "ksc-AppConfig.php";
require_once "ksc-Tool-TRECVID.php";


/////////////////////////////// START /////////////////////////////
$szRootDir = $gszRootBenchmarkDir; // "/net/per610a/export/das09f/satoh-lab/ledduy/trecvid-sin-2012";

$szRootMetaDataInputDir = sprintf("%s/trecvid-active", $szRootDir); // *** CHANGED ***
$szRootMetaDataOutputDir =sprintf("%s/metadata/keyframe-5", $szRootDir);
$szRootVideoDir =sprintf("%s/video", $szRootDir);

$nTVYear=2013;
$szTVYear = sprintf("tv%s", $nTVYear);

$arCode = array("iacc.2.A", "iacc.2.B", "iacc.2.C");
$szRootVideoDir =sprintf("%s/video", $szRootDir);

foreach ($arCode as $szCode)
{
	// iacc.2.A.mp7
	$szShotXMLInputDir = sprintf("%s/%s.mp7", $szRootMetaDataInputDir, $szCode); 
	
	// all msb of videos iacc.2.A/B/C are put into ONE dir 
	$szShotSBInputDir = sprintf("%s/msb", $szRootMetaDataInputDir, $szCode); 	

	/// lstx file --> having info such as frameRate, frameCount, duration
	$szFPVideoListFN = sprintf("%s/%s.%s.lstx", $szRootMetaDataOutputDir, $szTVYear, $szCode);
	
	loadListFile($arVideoList, $szFPVideoListFN);
	
	$arErrList = array();
	
	foreach($arVideoList as $szLine)
	{
		// TRECVID2011_11645 #$# 00001-Fujimoristas_invade_Amnisty_International_marathon._-o-_.MOV00010_64kb_512kb #$# tv2011/test
		$arTmp = explode("#$#", $szLine);
	
		$szVideoID = trim($arTmp[0]);
		$szVideoName = trim($arTmp[1]);
		$szVideoPath = trim($arTmp[2]);
		$fFrameRate = floatval($arTmp[3]);
		$nFrameCount = intval($arTmp[4]);
		$fDuration = floatval($arTmp[5]);
	
		$arTmp = explode("_", $szVideoID);
		$nVideoNum = intval($arTmp[1]); // use for shot xml
	
/*
		// check for tv2011.test
		if(($nVideoNum<19860) || ($nVideoNum>28123))
		{
			exit("ID error for tv2012\n");
		}
*/	

		$szFPShotXMLFN = sprintf("%s/%s.mp7.xml", $szShotXMLInputDir, $nVideoNum);
		$szFPShotSBFN = sprintf("%s/%s.msb", $szShotSBInputDir, $szVideoName);
	
		if((!file_exists($szFPShotXMLFN)) || (!file_exists($szFPShotSBFN)))
		{
			printf("File not found [%s] or [%s]\n", $szFPShotXMLFN, $szFPShotSBFN);
			exit();
		}
	
		/// perform correction
		$nNumRowszz = loadListFile($arTmpzzz, $szFPShotXMLFN);
		for($ix=$nNumRowszz-1; $ix>=0; $ix--)
		{
			if(trim($arTmpzzz[$ix]) == "/Description>") // error of mp7.xml files of tv2010
			{
				$arTmpzzz[$ix] = "</Description>";
				break;
			}
	
			if(trim($arTmpzzz[$ix]) == "</Description>") // file already fixed
			{
				break;
			}
		}
	
		$szFPFixedShotXMLFN = sprintf("%s/%s.corrected.mp7.xml", $szShotXMLInputDir, $nVideoNum);
		saveDataFromMem2File($arTmpzzz, $szFPFixedShotXMLFN);
		////////////
	
		$arOutput = parseOneShotXMLFileTV11($szFPFixedShotXMLFN, $fFrameRate, $szFileExt=".mp4");
	
		if(($arOutput['video_id'] != $szVideoID) || ($arOutput['video_name'] != $szVideoName))
		{
			exit("Error in data inconsistency\n");
		}
	
		$arOutputShot = array();
		$arOutputShot[] = $szVideoName;
		$arOutputShot[] = $szVideoID;
	
		$arOutputShot = array_merge($arOutputShot, $arOutput['shot_list']);
	
		$szOutputDir = sprintf("%s/%s", $szRootMetaDataOutputDir, $szVideoPath);
		makeDir($szOutputDir);
		$szFPShotInfoFN = sprintf("%s/%s.sb", $szOutputDir, $szVideoID);
		saveDataFromMem2File($arOutputShot, $szFPShotInfoFN);
	
		$arOutput = parseOneShotSBFileTV11($szFPShotSBFN, $szVideoID, $nVideoNum);
		$arOutputShotz = array();
		$arOutputShotz[] = $szVideoName;
		$arOutputShotz[] = $szVideoID;
	
		// lig.sb --> for validation with sb files provided by LIG
		$arOutputShotz = array_merge($arOutputShotz, $arOutput);
		$szFPShotInfoFN = sprintf("%s/%s.lig.sb", $szOutputDir, $szVideoID);
		saveDataFromMem2File($arOutputShotz, $szFPShotInfoFN);
	
		printf("### [%s]. Checking consistency between .sb and .lig.sb files ...", $szVideoID);
		//$arCheckedList = array(12647, 12904, 14273); // list of inconsistency but confirmed OK by manually check
	
		$arCheckedList = array();
		// 14273 --> Howen-BreakingDownTheBarriersAndCelebratingDiversityACollabora799._-o-_.Howen-BreakingDownTheBarriersAndCelebratingDiversityACollabora799_512kb --> 0.67 fps
		//
	
		if(!in_array($nVideoNum, $arCheckedList))
		{
			$nNumRows = sizeof($arOutputShotz);
			if($nNumRows != sizeof($arOutputShot))
			{
				$arErrList[] = sprintf("%s - %s", $szVideoID, $szVideoName);
				printf("Inconsistency between .sb and .lig.sb files for [{$szVideoID}-{$szVideoName}]\n");
				//exit();
			}
			for($i=0; $i<$nNumRows; $i++)
			{
				if($arOutputShot[$i] != $arOutputShotz[$i])
				{
					printf("Inconsistency between .sb and .lig.sb files for [{$szVideoID}-{$szVideoName}]\n");
					$arErrList[] = sprintf("%s #$# %s", $szVideoID, $szVideoName);
	
					break;
					//exit();
				}
			}
			printf("OK\n");
		}
		else
		{
			printf("### Already checked the inconsistency and allow for skipping!\n");
		}
	}
	print_r($arErrList);
	$szFPOutputFN = sprintf("%s/ErrInconsistency.%s.csv", $szRootMetaDataOutputDir, $szCode);
	saveDataFromMem2File($arErrList, $szFPOutputFN);
}
//////////////////////////////// FUNCTIONS /////////////////////////
/*
 Begin and end frame numbers of video shots -
 automatic shot boundary detection by Georges Quénot, LIG-CNRS
 0 30
 31 343
 344 465
 466 777
 778 1397
 */
function parseOneShotSBFileTV11($szFPShotSBFN, $szVideoID, $nVideoNum)
{
	$nNumRows = loadListFile($arList, $szFPShotSBFN);

	// skip 2 rows
	$arOutput = array();
	for($i=2; $i<$nNumRows; $i++)
	{
		$arTmp = explode(" ", $arList[$i]);
		if(sizeof($arTmp) != 2)
		{
			print_r($arTmp);
			exit("Data parsing error {$arList[$i]}\n");
		}

		$nFrameStart = intval($arTmp[0]);
		$nFrameEnd = intval($arTmp[1]);

		// some shots only have 1 frame
		if($nFrameStart > $nFrameEnd)
		{
			exit("Data parsing error {[{$nFrameStart} vs {$nFrameEnd} ]}\n");
		}

		$nDuration = $nFrameEnd - $nFrameStart+1;
		$nShotID = $i-1; // shot ID starting from 1
		// TRECVID2011_100.shot100_1
		$szVideoShotID = sprintf("%s.shot%s_%s", $szVideoID, $nVideoNum, $nShotID);
		$arOutput[] = sprintf("%s #$# %d #$# %d", $szVideoShotID, $nFrameStart, $nDuration);
	}

	return $arOutput;
}


// Modified from parseOneShotXMLFile()
function parseOneShotXMLFileTV11($szFPShotXMLFN, $fFrameRate, $szFileExt="mp4")
{
	global $gszDelim;

	if (file_exists($szFPShotXMLFN))
	{
		printf("### Parsing [%s] ...", $szFPShotXMLFN);
		$xmlRawObj = simplexml_load_file($szFPShotXMLFN);
		if($xmlRawObj === false)
		{
			exit("Failed to open xml file {$szFPShotXMLFN}!");
		}
		printf("Finish\n");
	}
	else
	{
		printf("### Error file not found! [%s]\n", $szFPShotXMLFN);
	}

	$xmlVideoObj = $xmlRawObj->Description->MultimediaContent->Video;

	$attrs = $xmlVideoObj->attributes();
	$szVideoID = (string)($attrs['id']);
	$szVideoName = (string)($xmlVideoObj->MediaLocator->MediaUri);

	$arOutput = array();
	$arOutput['video_id'] = $szVideoID;

	//$arOutput['video_name'] = str_replace(".mpg", "", $szVideoName); // only name, no extension
	$arOutput['video_name'] = rtrim($szVideoName, $szFileExt);

	$arOutput['shot_list'] = array();
	foreach ($xmlVideoObj->TemporalDecomposition->VideoSegment as $videoSegment)
	{
		$attrs = $videoSegment->attributes();
		$szShotID = (string)($attrs['id']);

		$szTimePoint = (string)($videoSegment->MediaTime->MediaTimePoint);

		// in the case of subshot - TV2005
		if(!isset($videoSegment->MediaTime->MediaTimePoint))
		{
			continue;
		}

		$szTimeDuration =  (string)($videoSegment->MediaTime->MediaDuration);

		$nFrameStart = parseTimePointTV11($szTimePoint, $fFrameRate);
		$nDuration = parseTimeDurationTV11($szTimeDuration, $fFrameRate);

		// concatenate videoID.shotID
		$arOutput['shot_list'][] = sprintf("%s.%s #$# %d #$# %d", $szVideoID, $szShotID, $nFrameStart, $nDuration);
	}

	//	print_r($arOutput);
	return $arOutput;
}

/**
 http://www-nlpir.nist.gov/projects/tv2003/common.shot.ref/time.elements
 T00:00:42:13F25   --> frame offset

 framenumber = (int)( totalseconds * maxFractions + numberOfFractions) / time_unit;
 e.g. PT16S4484N30000F   or   T00:00:16:4484F30000
 totalseconds = 16
 numberOfFractions = 4484;
 maxFractions = 30000
 time_unit = 1001
 framenumber = (16 * 30000 + 4484) / 1001 = 484

 frameRate = maxFractions/time_unit  --> FLOATVAL (bug if cast to INTVAL)
 */

function parseTimePointTV11($szTimePoint, $fFrameRate)
{
	$arTmp = explode(":", $szTimePoint);
	if(sizeof($arTmp) != 4)
	{
		terminatePrg("Wrong time point format!");
	}

	$arTmp1 = explode("T", trim($arTmp[0]));
	if(sizeof($arTmp1) != 2)
	{
		terminatePrg("Wrong time point format!");
	}
	$nHour = intval($arTmp1[1]);

	$nMin = intval($arTmp[1]);
	$nSec = intval($arTmp[2]);

	if($nMin>60 || $nSec>60)
	{
		printf("Data error! Min or sec value is larger than 60. Min: [%d] - Sec: [%d]\n", $nMin, $nSec);
		exit();
	}

	$arTmp1 = explode("F", trim($arTmp[3]));
	if(sizeof($arTmp1) != 2)
	{
		exit("Wrong time point format!");
	}
	$nFrac = intval($arTmp1[0]); // 13
	$nMaxFrac = intval($arTmp1[1]); // 25

	$fTimeUnit = 1.0*$nMaxFrac/$fFrameRate;

	if($nHour>24 || $nMin>60 || $nSec>60)
	{
		printf("Wrong time point format! [%s] --> [%s:%s:%s]!\n", $szTimePoint, $nHour, $nMin, $nSec);
		exit();
	}
	$nTotalSeconds = $nHour*3600+$nMin*60+$nSec;
	$nFrameNum = (int) ((1.0*$nTotalSeconds*$nMaxFrac + $nFrac) /$fTimeUnit);

	$szFFMPEGTimeCode = sprintf("%02d:%02d:%02d.%0.4f", $nHour, $nMin, $nSec, 1.0*$nFrac/$nMaxFrac);

	return $nFrameNum;
}

// PT00H00M13S15N25F   --> frame count
function parseTimeDurationTV11($szTimeDuration, $fFrameRate)
{
	$arTmp = explode("PT", $szTimeDuration);
	if(sizeof($arTmp) != 2)
	{
		terminatePrg("Wrong time point format!");
	}

	$szTmp = trim($arTmp[1]);
	$arTmp = explode("H", $szTmp);
	if(sizeof($arTmp) != 2)
	{
		//terminatePrg("Wrong time point format!");
		$nHour = 0;
		$szTmp = trim($arTmp[0]);
	}
	else
	{
		$nHour = intval($arTmp[0]);
		$szTmp = trim($arTmp[1]);
	}

	$arTmp = explode("M", $szTmp);
	if(sizeof($arTmp) != 2)
	{
		//terminatePrg("Wrong time point format!");
		$nMin = 0;
		$szTmp = trim($arTmp[0]);
	}
	else
	{
		$nMin = intval($arTmp[0]);
		$szTmp = trim($arTmp[1]);
	}

	$arTmp = explode("S", $szTmp);
	if(sizeof($arTmp) != 2)
	{
		// terminatePrg("Wrong time point format!");
		$szTmp = trim($arTmp[0]);
		$nSec = 0;
	}
	else
	{
		$nSec = intval($arTmp[0]);
		$szTmp = trim($arTmp[1]);
	}

	$arTmp = explode("N", $szTmp);
	if(sizeof($arTmp) != 2)
	{
		terminatePrg("Wrong time point format!");
	}
	$nFrac = intval($arTmp[0]);

	$szTmp = trim($arTmp[1]);
	$arTmp = explode("F", $szTmp);
	if(sizeof($arTmp) != 2)
	{
		exit("Wrong time point format!");
	}
	$nMaxFrac = intval($arTmp[0]);

	if($nFrac < 0)
	{
		$nFrac = 0;
	}

	$fTimeUnit = 1.0*$nMaxFrac/$fFrameRate;

	if($nHour>24 || $nMin>60 || $nSec>60)
	{
		printf("Wrong time duration format! [%s] --> [%s:%s:%s]!\n", $szTimePoint, $nHour, $nMin, $nSec);
		exit();
	}
	$nTotalSeconds = $nHour*3600+$nMin*60+$nSec;
	$nFrameNum = (int) (($nTotalSeconds*$nMaxFrac + $nFrac) /$fTimeUnit);

	$szFFMPEGTimeCode = sprintf("%02d:%02d:%02d.%0.4f", $nHour, $nMin, $nSec, 1.0*$nFrac/$nMaxFrac);
	return $nFrameNum;
}

?>
