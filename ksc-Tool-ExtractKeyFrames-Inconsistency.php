<?php

/**
 * 		@file 	ksc-Tool-ExtractKeyFrames-Inconsistency.php
 * 		@brief 	Extract Keyframes Using FFMPEG-PHP. Special treatment for inconsistency sb & lig.sb
 *		@author Duy-Dinh Le (ledduy@gmail.com, ledduy@ieee.org).
 *
 * 		Copyright (C) 2010-2013 Duy-Dinh Le.
 * 		All rights reserved.
 * 		Last update	: 05 Jul 2013.
 */

// Update Jul 04, 2012
//--> Adding option -an in conversion --> disable audio

//--> Output video dir --> tmp

//--> Change the way of calculation of source frame rate
// Source frame rate = Total frames / Duration
// Total frames --> obtain from .sb files (raw data provided by LIG)
// Duration --> obtain from .lstx files (parse from xml files)

/// !!! FOR VIDEOS THAT ARE INCONSISTENCY DUE TO FRAMERATE OF FFMPEG
// --> This tool is used for treatment
// --> convert to mpg format, 25fps --> recompute shot info
// 		// Output is mpg format --> not use mp4 since it still causes err with 0.33fps case
//		$szFPOutputVideoFN = sprintf("%s/%s-NII.mpg", $szVideoDir, $szVideoName);
//		$szCmdLine = sprintf("ffmpeg -i %s -y -qscale 1 -r %s %s", $szFPInputVideoFN, $nNormalizeFrameRate, $szFPOutputVideoFN);
//
// IMPORTANT --> $nFrameID >= 1 && $nFrameID < $nFrameCount
/*
 if(!$nFrameID)
 {
continue;
}
///
if($nFrameEnd>$nFrameCount)
{
$nFrameEnd = $nFrameCount;
}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////

require_once "ksc-AppConfig.php";

$nNormalizeFrameRate = 25;

$szFPErrLogFN = sprintf("ksc-Tool-ExtractKeyFrames-Inconsistency.log");

// Checking ffmpeg-php tool
$extension = "ffmpeg";
$extension_soname = $extension . "." . PHP_SHLIB_SUFFIX;
$extension_fullname = PHP_EXTENSION_DIR . "/" . $extension_soname;

// load extension
if (!extension_loaded($extension)) {
	dl($extension_soname) or die("Can't load extension $extension_fullname\n");
}

//$gszVideoExt = "mp4";

// List of videos that are inconsistency between .sb and .lig.sb files
// --> the list is generated by nsc-Tool-ParseShotBoundaryXML-TV11.php


///////////////////// START ///////////////

$arCode = array(
		2013 => "iacc.2.A",
		2014 => "iacc.2.B",
		2015 => "iacc.2.C");

//////////////////////////////// THIS PART FOR CUSTOMIZATION //////////////////
$szRootDir = $gszRootBenchmarkDir; // "/net/per610a/export/das09f/satoh-lab/ledduy/trecvid-sin-2012";

$szRootMetaDataDir =sprintf("%s/metadata/keyframe-5", $szRootDir);
makeDir($szRootMetaDataDir);
$szRootVideoDir =sprintf("%s/video", $szRootDir);
$szRootKeyFrameDir = sprintf("%s/keyframe-5", $szRootDir);

$szRawSBDir = sprintf("%s/trecvid-active/msb", $szRootDir); // buggy - tv2013 uses msb instead of sb

$nMaxKFPerShot=5;

foreach($arCode as $nTVYear =>$szPatName)
{
	$szFPPatName = sprintf("test.%s", $szPatName);
	$szVideoPath = sprintf("tv%s/%s", $nTVYear, $szFPPatName);
	
	/////////////////////////////////////////////////////////////
	// .lst files must be copied to metadata dir first
	// tv2007.devel.lst
	$szFPVideoListFN = sprintf("%s/%s.lst",
			$szRootMetaDataDir, $szFPPatName);
	$szMetaDataDir = sprintf("%s/%s",
			$szRootMetaDataDir, $szVideoPath);
	makeDir($szMetaDataDir);
	
	// load data for black list
	$arBlackList = array();
	$szFPBlackListFN = sprintf("%s/ErrInconsistency.%s.csv", $szRootMetaDataDir, $szFPPatName);
	loadListFile($arRawList, $szFPBlackListFN);
	foreach($arRawList as $szLine)
	{
		$arTmp = explode("#$#", $szLine);
		$szVideoID = trim($arTmp[0]);
		$szVideoName = trim($arTmp[1]);
	
		$arBlackList[$szVideoID] = $szVideoName;
	}
	
	// load video info
	$arVideoDurationList = array();
	$szFPVideoPatFN = sprintf("%s/tv%s.%s.lstx", $szRootMetaDataDir, $nTVYear, $szPatName); // buggy
	loadListFile($arRawList, $szFPVideoPatFN);
	foreach($arRawList as $szLine)
	{
		// TRECVID2012_22769 #$# IsaacNebotValladolid._-o-_.lugar01_512kb #$# tv2012/test #$# 58.33 #$# 6304 #$# 108.0667 #$# 579224.0000
		$arTmp = explode("#$#", $szLine);
		$szVideoID = trim($arTmp[0]);
		$szVideoName = trim($arTmp[1]);
		$nDuration = trim($arTmp[5]);
		$arVideoDurationList[$szVideoID] = $nDuration;
	}
	
	
	extractKeyFrameForOneList($arBlackList, $arVideoDurationList, 
			$szMetaDataDir, $szRootVideoDir, $szRootKeyFrameDir,
			$nMaxKFPerShot);
}
///////////////////////////////////////////// FUNCTIONS ///////////////////////////////////////

function extractKeyFramesForOneVideo(
		$szFPShotBoundaryFN,
		$szVideoDir,
		$szMetaDataDir,
		$szKeyFrameDir,
		$fSourceFrameRate,
		$nMaxKFPerShot=5)
{
	global $szFPErrLogFN;
	global $nNormalizeFrameRate;

	$nQuality = 100; // 100 --> Best

	$nNumRows = loadListFile($arList, $szFPShotBoundaryFN);
	/*
	 00001-Fujimoristas_invade_Amnisty_International_marathon._-o-_.MOV00010_64kb_512kb
	TRECVID2011_11645
	TRECVID2011_11645.shot11645_1 #$# 0 #$# 243
	TRECVID2011_11645.shot11645_2 #$# 243 #$# 3
	TRECVID2011_11645.shot11645_3 #$# 246 #$# 186
	*/
	$szVideoName = trim($arList[0]);
	$szVideoID = trim($arList[1]);

	// %s-NII --> this file is converted from original file
	$szFPVideoFN = sprintf("%s/%s-NII.mpg", $szVideoDir, $szVideoName);
	printf("### Processing video [%s]\n", $szFPVideoFN);

	$objVideo = new ffmpeg_movie ($szFPVideoFN);
	if(!is_object($objVideo))
	{
		$arLog = array();
		$szErr = sprintf("Error in opening video [%s]", $szFPVideoFN);
		$arLog[] = $szErr;
		saveDataFromMem2File($arLog, $szFPErrLogFN, "a+t");
		exit($szErr);
	}

	$nFrameCount = $objVideo->getFrameCount();
	printf("### Frame count = %s\n", $nFrameCount);

	$arMetaDataList = array();
	//print_r($arList);
	for($iz=2; $iz<$nNumRows; $iz++)
	{
		printf("### Parsing [%s]\n", $arList[$iz]);

		// TRECVID2005_141.shot141_1 #$# 0 #$# 75
		$arTmp = explode("#$#", $arList[$iz]);
		$szShotID = trim($arTmp[0]);
		$nFrameStart = intval($arTmp[1]);
		$nDuration = intval($arTmp[2]);

		////
		$nFrameStart = intval(($nNormalizeFrameRate*$nFrameStart)/$fSourceFrameRate);
		$nDuration = intval(($nNormalizeFrameRate*$nDuration)/$fSourceFrameRate);

		printf("### After converting [%s-%s]\n", $nFrameStart, $nDuration);

		$nFrameEnd = $nFrameStart + $nDuration;

		if($nFrameEnd>$nFrameCount)
		{
			$nFrameEnd = $nFrameCount;
		}

		$nFrameInterval = max(1, 1.0*$nDuration/$nMaxKFPerShot);  // float val

		// TRECVID2005_276.shot276_1.RKF_0.Frame_27
		$arKFList = array();
		$nMiddleFrame = intval($nFrameStart + 0.5*$nDuration);

		// from middle to right
		$nCount = 0;
		$nMaxKFPerHalfShot = round($nMaxKFPerShot*0.5);
		printf("Half - %d - Middle: %d - Interval: %f\n", $nMaxKFPerHalfShot, $nMiddleFrame, $nFrameInterval);
		for($nFrameID=$nMiddleFrame; $nFrameID<$nFrameEnd; $nFrameID+=$nFrameInterval)
		{
			$arKFList[$nFrameID] = 1;  // to enforce no duplicate
			$nCount++;
			if($nCount > $nMaxKFPerHalfShot)
			{
				break;
			}
		}

		// from middle to left
		$nCount = 0;
		for($nFrameID=$nMiddleFrame-$nFrameInterval; $nFrameID>=$nFrameStart; $nFrameID-=$nFrameInterval)
		{
			$arKFList[$nFrameID] = 1;  // to enforce no duplicate
			$nCount++;
			if($nCount >= $nMaxKFPerShot)
			{
				break;
			}
		}
		ksort($arKFList);
		$nKFIndex = 0;
		//print_r($arKFList);
		foreach($arKFList as $nFrameID => $nTmpzz)
		{
			$szKeyFrameID = sprintf("%s.RKF_%d.Frame_%d", $szShotID, $nKFIndex, $nFrameID);

			// IMPORTANT --> $nFrameID >= 1
			if(!$nFrameID)
			{
				continue;
			}

			$objFrame = $objVideo->getFrame($nFrameID);
			if(!is_object($objFrame))
			{
				$arLog = array();
				$szErr = sprintf("Error in seeking to frame [%s-%s]", $szVideoID, $nFrameID);
				$arLog[] = $szErr;
				saveDataFromMem2File($arLog, $szFPErrLogFN, "a+t");
				continue;
			}

			$objGDFrame = $objFrame->toGDImage();

			$szFPOutputFN = sprintf("%s/%s.jpg", $szKeyFrameDir, $szKeyFrameID);
			printf("--> Saving Frame [%s]\n", $szKeyFrameID);
			$nRet = imagejpeg($objGDFrame, $szFPOutputFN, $nQuality);
			if(!$nRet)
			{
				$arLog = array();
				$szErr = sprintf("Error in saving frame output image [%s-%s]", $szVideoID, $nFrameID);
				$arLog[] = $szErr;
				saveDataFromMem2File($arLog, $szFPErrLogFN, "a+t");
				continue;
			}

			$arMetaDatarList[] = $szKeyFrameID;

			$nKFIndex++;
			if($nKFIndex > $nMaxKFPerShot)
			{
				break;
			}
		}
		if(!$nKFIndex)
		{
			$arLog = array();
			$arLog[] = sprintf("No keyframe for [%s-%s]", $szVideoID, $arList[$iz]);
			saveDataFromMem2File($arLog, $szFPErrLogFN, "a+t");
		}
	}

	$szFPMetaDataOutputFN = sprintf("%s/%s.prg", $szMetaDataDir, $szVideoID);
	saveDataFromMem2File($arMetaDatarList, $szFPMetaDataOutputFN);
}

function extractKeyFrameForOneList(&$arBlackList, &$arVideoDurationList, 
		$szMetaDataDir, $szRootVideoDir, $szRootKeyFrameDir,
		$nMaxKFPerShot=5)
{
	global $nNormalizeFrameRate;
	global $szVideoPath;
	
	

	foreach($arBlackList as $szVideoID=>$szVideoName)
	{
		$szKFOutputDir = sprintf("%s/%s/%s", $szRootKeyFrameDir, $szVideoPath, $szVideoID);
		makeDir($szKFOutputDir);

		$szVideoDir = sprintf("%s/%s", $szRootVideoDir, $szVideoPath);
		$szOutputVideoDir = "/tmp"; // buggy
		
		// We need to convert the video
		$szFPInputVideoFN = sprintf("%s/%s.mp4", $szVideoDir, $szVideoName);

		// Output is mpg format --> not use mp4 since it still causes err with 0.33fps case
		$szFPOutputVideoFN = sprintf("%s/%s-NII.mpg", $szOutputVideoDir, $szVideoName);
		
		// -an --> no audio to avoid bug in converting
		$szCmdLine = sprintf("ffmpeg -i %s -an -y -qscale 1 -r %s %s", $szFPInputVideoFN, $nNormalizeFrameRate, $szFPOutputVideoFN);
		execSysCmd($szCmdLine);
		
		$szCmdLine = sprintf("cp %s %s/", $szFPInputVideoFN, $szOutputVideoDir);
		execSysCmd($szCmdLine);
		
		$szShotInfoDir = $szMetaDataDir;

		/// !!! IMPORTANT - Pick lig.sb file, NOT .sb file as normal case
		$szFPShotBoundaryFN = sprintf("%s/%s.lig.sb", $szShotInfoDir, $szVideoID);
		//printf("%s\n", $szFPShotBoundaryFN);
		
		global $szRawSBDir;
		$szFPOrigShotBoundaryFN = sprintf("%s/%s.msb", $szRawSBDir, $szVideoName); // buggy
		$nNumRows = loadListFile($arRawList, $szFPOrigShotBoundaryFN);
		
		$szLastRow = trim($arRawList[$nNumRows-1]);
		$arTmpz = explode(" ", $szLastRow);
		if(sizeof($arTmpz) !=2)
		{
			print_r($arTmpz);
			exit("Serious error!");
		}
		
		print_r($arTmpz);
		
		$nFrameCount = intval($arTmpz[1]) + 1;
		
		$fSourceFrameRate = 1.0*$nFrameCount/$arVideoDurationList[$szVideoID];
		printf("Frame count: %s. Duration: %s. Source frame rate: %s\n", $nFrameCount, $arVideoDurationList[$szVideoID], $fSourceFrameRate);
		extractKeyFramesForOneVideo(
				$szFPShotBoundaryFN,
				$szOutputVideoDir,
				$szMetaDataDir,
				$szKFOutputDir,
				$fSourceFrameRate,
				$nMaxKFPerShot);
	}
}

?>
